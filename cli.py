from subprocess import Popen, PIPE
from jinja2 import Template
import xml.etree.ElementTree


LOG4J_POM_XML = """
		<dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>{{LOG4J_VERSION}}</version>
        </dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>{{LOG4J_VERSION}}</version>
		</dependency>
"""

def main():
    

    with open("poc_template/pom.xml.template", "r") as pom_template_file:
        pom_template = pom_template_file.read()    
    t = Template(LOG4J_POM_XML)
    log4j_dependencies = t.render(LOG4J_VERSION="2.15.0")

    with open("poc_template/pom.xml", "w") as pom_file:
        pom_file.write()

    with open("docker-compose.yaml.template", "r") as docker_compose_template_file:
        docker_compose_template = docker_compose_template_file.read()    
    t = Template(docker_compose_template)
    docker_compose = t.render(JAVA_VERSION="java8")
    with open("docker-compose.yaml", "w") as docker_compose_file:
        docker_compose_file.write(docker_compose)
    

    docker_compose_up_process = Popen(["docker-compose", "up"], stdout=PIPE, stderr=PIPE)
    while True:
        for line in iter(docker_compose_up_process.stdout.readline,''):
            output = line.rstrip()
            if "Remote Code Execution gained!!!" in str(output):
                print("This version of the application is vulnerable !!!!")
                docker_compose_down_process = Popen(["docker-compose", "down"], stdout=PIPE, stderr=PIPE)
                docker_compose_down_process.communicate()
                exit(1)
            if "has to be an integer." in str(output):
                print("This version of the application is not vulnerable")
                docker_compose_down_process = Popen(["docker-compose", "down"], stdout=PIPE, stderr=PIPE)
                docker_compose_down_process.communicate()
                exit(0)
            
        
main()
